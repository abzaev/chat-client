{"version":3,"sources":["components/DialogForm/index.tsx","components/EditForm/index.tsx","components/MessageListItem/index.tsx","store/messages/actions.ts","store/messages/actionCreators.ts","containers/MessageList/index.tsx","containers/SendMessagePanel/index.tsx","containers/Tab/index.tsx","containers/Tabs/index.tsx","App.tsx","serviceWorker.ts","store/messages/reducer.ts","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["DialogForm","props","title","content","close","open","Dialog","fullWidth","onClose","DialogTitle","DialogContent","EditForm","onClick","initialValues","closeForm","useState","messageText","setMessageText","onSubmit","event","preventDefault","changedMessage","Grid","container","spacing","item","TextField","variant","value","onChange","target","direction","Button","type","MessageListItem","msg","deleteMessage","changeMessage","setOpen","ListItem","ListItemText","primary","justify","userName","IconButton","size","_id","secondary","file_link","Link","component","window","location","name","message","fetchMessages","messages","payload","fetchMessage","socket","openSocket","joinToRoom","roomId","emit","MessageList","dispatch","useDispatch","messageList","map","id","a","axios","delete","other","put","Divider","useStyles","makeStyles","emoji","position","zIndex","bottom","right","appBar","top","borderTop","SendMessagePanel","classes","setUserName","file","setFile","emojiPickerState","SetEmojiPicker","className","onSelect","native","AppBar","color","Toolbar","FormControl","OutlinedInput","placeholder","alignItems","multiple","files","style","display","htmlFor","fileType","fileName","undefined","label","TabPanel","useSelector","state","useEffect","on","List","Paper","ElevationScroll","children","trigger","useScrollTrigger","disableHysteresis","threshold","React","cloneElement","elevation","TabsPanel","setValue","Tabs","newValue","Tab","Container","App","Boolean","hostname","match","initialState","combineReducers","action","createStoreWithMiddleware","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunkMiddleware","composeEnhancers","createStore","rootReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.adf93b23.chunk.js","sourcesContent":["import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n  content?: any;\n  title?: string;\n  close: () => void;\n  open: boolean;\n}\n\nexport const DialogForm = (props: Props) => {\n  const {\n    title,\n    content,\n    close,\n    open,\n  } = props;\n\n  return (\n    <>\n      <Dialog fullWidth open={open} onClose={close}>\n        {title && <DialogTitle>{title}</DialogTitle>}\n        {content && (\n          <DialogContent>\n            {content}\n          </DialogContent>\n        )}\n      </Dialog>\n    </>\n  );\n}\n","import React, { useState } from 'react';\nimport { Grid, TextField, Button } from '@material-ui/core';\nimport { Message } from '../../types';\n\ninterface Props {\n  initialValues: Message,\n  onClick: (changedMessage: Message) => void,\n  closeForm: () => void;\n}\n\nexport const EditForm = (props: Props) => {\n  const {\n    onClick,\n    initialValues,\n    closeForm,\n  } = props;\n  const [messageText, setMessageText] = useState(initialValues.messageText);\n\n  const onSubmitHandler = (event: any) => {\n    event.preventDefault();\n    const changedMessage = { ...initialValues, messageText };\n    onClick(changedMessage);\n    closeForm();\n  }\n\n  return (\n    <form onSubmit={onSubmitHandler}>\n      <Grid container spacing={1}>\n        <Grid item>\n          <TextField\n            variant=\"outlined\"\n            value={messageText}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => setMessageText(event.target.value)}\n          />\n        </Grid>\n        <Grid container direction=\"row\" spacing={1} item>\n          <Grid item>\n            <Button type=\"submit\">Send</Button>\n          </Grid>\n          <Grid item>\n            <Button onClick={closeForm}>Cancel</Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    </form>\n  ) \n}\n","import React, { useState } from 'react';\nimport { ListItem, ListItemText, Grid, IconButton, Link } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { Message } from '../../types';\nimport { DialogForm } from '../DialogForm';\nimport { EditForm } from '../EditForm';\n\ninterface Props {\n  msg: Message;\n  deleteMessage: (id: Message['_id']) => void;\n  changeMessage: (message: Message) => void;\n}\n\nexport const MessageListItem = (props: Props) => {\n  const { msg, deleteMessage, changeMessage } = props;\n  const [open, setOpen] = useState(false);\n\n  return (\n    <ListItem>\n      <ListItemText\n        primary={\n          <Grid container item justify=\"space-between\">\n            <Grid item>\n              {msg.userName}\n            </Grid>\n            <Grid item>\n              <IconButton size=\"small\" onClick={() => setOpen(true)}>\n                <EditIcon />\n              </IconButton>\n              <IconButton onClick={() => deleteMessage(msg._id)} size=\"small\">\n                <DeleteIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n        }\n        secondary={\n          <>\n            <div>\n              {msg.messageText}\n            </div>\n            {\n              msg.file_link && (\n                <div>\n                  <Link component=\"button\" onClick={() => (window as any).location = msg.file_link}>\n                    Download file: {msg.name}\n                  </Link>\n                </div>\n              )\n            }\n          </>\n        }\n      />\n      <DialogForm\n        open={open}\n        close={() => setOpen(false)}\n        title=\"Редактировать сообщение\"\n        content={\n          <EditForm\n            closeForm={() => setOpen(false)}\n            initialValues={msg}\n            onClick={(message: Message) => changeMessage(message)}\n          />\n        }\n      />\n    </ListItem>\n  )\n}\n","import { Message } from '../../types';\n\nexport const fetchMessages = (messages: Message[]) =>\n  ({\n    type: 'FETCH_MESSAGES',\n    payload: messages,\n  } as const);\n\nexport const fetchMessage = (messages: Message) =>\n  ({\n    type: 'FETCH_MESSAGE',\n    payload: messages,\n  } as const);\n","import openSocket from 'socket.io-client';\nimport axios from 'axios';\nimport { Message, AppThunk } from '../../types';\nimport { fetchMessages, fetchMessage } from './actions';\n\nconst socket = openSocket('/');\n\nexport const joinToRoom = (roomId: number) => {\n  socket.emit('join', roomId);\n}\n\nexport const fetchMessagesCreator = (): AppThunk => async dispatch => {\n  socket.on('allMessages', (messages: Message[]) => dispatch(fetchMessages(messages)));\n};\n\nexport const fetchMessageCreator = (): AppThunk => async dispatch => {\n  socket.on('chat message', (messages: Message) => dispatch(fetchMessage(messages)));\n};\n\nexport const deleteMessage = (id: Message['_id'], roomId: number): AppThunk => async () => {\n  if (roomId === 0) {\n    await axios.delete(`/messagework/${id}`);\n  } else {\n    await axios.delete(`/messageflud/${id}`);\n  }\n  joinToRoom(roomId)\n};\n\nexport const changeMessage = (message: Message, roomId: number): AppThunk => async () => {\n  const {_id, ...other} = message;\n  if (roomId === 0) {\n    await axios.put(`/messagework/${_id}`, other);\n  } else {\n    await axios.put(`/messageflud/${_id}`, other);\n  }\n  joinToRoom(roomId);\n};\n\nexport const sendMessage = (message: any) => {\n  if (message.file) {\n    message.fileType = message.file.type;\n    message.fileName = message.file.name;\n  }\n  socket.emit('chat message', message);\n}\n","import React from 'react';\nimport { Divider } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { MessageListItem } from '../../components/MessageListItem';\nimport { Message } from '../../types';\nimport { deleteMessage, changeMessage } from '../../store/index';\n\ninterface Props {\n  messageList: Message[];\n  roomId: number;\n}\n\nexport const MessageList = (props: Props) => {\n  const dispatch = useDispatch();\n  const { messageList, roomId } = props;\n\n  return (\n    <>\n      {messageList.map((msg: Message) => (\n        <>\n          <MessageListItem\n            deleteMessage={(id: Message['_id']) => dispatch(deleteMessage(id, roomId))}\n            changeMessage={(message: Message) => dispatch(changeMessage(message, roomId))}\n            msg={msg}\n          />\n          <Divider component=\"li\" />\n        </>\n      ))}\n    </>\n  )\n};\n","import React, { useState } from 'react';\nimport { AppBar, Grid, Button, Toolbar, TextField, IconButton, FormControl, OutlinedInput } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { sendMessage } from '../../store/index';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  emoji: {\n    position: 'fixed',\n    zIndex: 1101,\n    bottom: 0,\n    right: 0,\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n    borderTop: '1px solid blue',\n  }\n});\n\nexport const SendMessagePanel = () => {\n  const classes = useStyles();\n\n  const [messageText, setMessageText] = useState(\"\");\n  const [userName, setUserName] = useState(\"Anonymous\");\n  const [file, setFile] = useState();\n  const [emojiPickerState, SetEmojiPicker] = useState(false);\n\n  const triggerPicker = (event: React.MouseEvent) => {\n    event.preventDefault();\n    SetEmojiPicker(!emojiPickerState);\n  }\n\n  return (\n    <>\n      <div className={classes.emoji}>\n        {emojiPickerState && (\n          <Picker\n            emoji=\"point_up\"\n            // @ts-ignore\n            onSelect={emoji => setMessageText(messageText + emoji.native)}\n          />\n        )}\n      </div>\n      <AppBar position=\"fixed\" color=\"inherit\" className={classes.appBar}>\n        <Toolbar>\n          <FormControl fullWidth variant=\"outlined\">\n            <OutlinedInput\n              placeholder=\"Enter your message\"\n              value={messageText}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => setMessageText(event.target.value)}\n            />\n          </FormControl>\n          <Grid container direction=\"row\" spacing={1} alignItems=\"center\">\n            <Grid item>\n              <IconButton size=\"small\" onClick={triggerPicker}>\n                <InsertEmoticonIcon />\n              </IconButton>\n            </Grid>\n            <Grid item>\n              <input\n                id=\"contained-button-file\"\n                multiple\n                type=\"file\"\n                onChange={(event: any) => setFile(event.target.files[0])}\n                style={{\n                  display: 'none',\n                }}\n              />\n              <label htmlFor=\"contained-button-file\">\n                <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                  Upload\n                </Button>\n              </label>\n            </Grid>\n            <Grid item>\n              <Button\n                onClick={() => {\n                  sendMessage({messageText, userName, file});\n                  setMessageText(\"\");\n                  setFile(undefined);\n                }}\n                variant=\"contained\">Send</Button>\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Name\"\n                variant=\"outlined\"\n                value={userName}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => setUserName(event.target.value)}\n              />\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </>\n  ) \n}","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { \n  Paper,\n  Toolbar,\n  List,\n} from '@material-ui/core';\nimport { MessageList } from '../MessageList';\nimport { SendMessagePanel } from '../SendMessagePanel'; \nimport { AppState } from '../../types';\nimport { fetchMessagesCreator, fetchMessageCreator, joinToRoom } from '../../store/index';\n\ninterface TabPanelProps {\n  roomId: number;\n}\n\nexport const TabPanel = (props: TabPanelProps) => {\n  const dispatch = useDispatch();\n  const messageList = useSelector((state: AppState) => state.messages.messages);\n  const { roomId } = props;\n\n  useEffect(() => {\n    joinToRoom(roomId);\n  }, [roomId])\n\n  useEffect(() => {\n    dispatch(fetchMessagesCreator());\n    dispatch(fetchMessageCreator());\n  }, [dispatch])\n\n  return (\n    <>\n      <List>\n        <Paper>\n          <MessageList roomId={roomId} messageList={messageList} />\n        </Paper>\n      </List>\n\n      <Toolbar />\n\n      <SendMessagePanel />\n    </>\n  );\n}\n","import React from 'react';\nimport { AppBar, Tabs, Tab, useScrollTrigger, Toolbar, Container } from '@material-ui/core';\nimport { TabPanel } from '../Tab';\n\ninterface Props {\n  children: React.ReactElement;\n}\n\nfunction ElevationScroll(props: Props) {\n  const { children } = props;\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n}\n\nexport const TabsPanel = () => {\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <>\n      <ElevationScroll>\n        <AppBar>\n          <Toolbar>\n            <Tabs value={value} onChange={(event: React.ChangeEvent<{}>, newValue: number) => setValue(newValue)}>\n              <Tab label=\"Рабочий чат\" />\n              <Tab label=\"Флудилка\" />\n            </Tabs>\n          </Toolbar>\n        </AppBar>\n      </ElevationScroll>\n      <Toolbar />\n      <Container>\n        {\n          value === 0\n          ? <TabPanel roomId={value} />\n          : <TabPanel roomId={value} />\n        }\n      </Container>\n    </>\n  );\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { TabsPanel } from './containers/Tabs';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TabsPanel />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Reducer } from 'redux'\nimport { Message } from '../../types';\n\ninterface MessagesState {\n  messages: Message[];\n}\n\nconst initialState: MessagesState = {\n  messages: [],\n}\n\nconst reducer: Reducer<MessagesState> = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_MESSAGES':\n      return {...state, messages: action.payload}\n    case 'FETCH_MESSAGE':\n      return {...state, messages: [...state.messages, action.payload]}\n    default:\n      return state\n  }\n}\n\nexport { reducer as messages };\n","import { combineReducers } from 'redux';\nimport { messages } from './messages/reducer';\n\nexport default combineReducers({\n  messages,\n})\n","import thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './rootReducer';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst createStoreWithMiddleware = composeEnhancers(applyMiddleware(thunkMiddleware))(createStore);\n\nexport default createStoreWithMiddleware(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}